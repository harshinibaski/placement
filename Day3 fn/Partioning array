import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class ArrayPartitionAndMerge {
    public static void main(String[] args) {
        int[] array = {1, 2, 3, 4, 5};
        int partitionSize = 2;
        int[] partitionOrder = {3, 2, 1};

        List<List<Integer>> partitions = partitionArray(array, partitionSize);
        List<Integer> mergedArray = mergePartitions(partitions, partitionOrder);

        System.out.println("Output:");
        for (int num : mergedArray) {
            System.out.print(num + " ");
        }
    }

    private static List<List<Integer>> partitionArray(int[] array, int partitionSize) {
        List<List<Integer>> partitions = new ArrayList<>();

        for (int i = 0; i < array.length; i += partitionSize) {
            List<Integer> partition = new ArrayList<>();
            for (int j = i; j < i + partitionSize && j < array.length; j++) {
                partition.add(array[j]);
            }
            partitions.add(partition);
        }

        return partitions;
    }

    private static List<Integer> mergePartitions(List<List<Integer>> partitions, int[] partitionOrder) {
        List<Integer> mergedArray = new ArrayList<>();

        List<List<Integer>> sortedPartitions = new ArrayList<>(partitions);

        // Sort partitions based on the specified order
        Collections.sort(sortedPartitions, Comparator.comparingInt(partition -> {
            for (int i = 0; i < partitionOrder.length; i++) {
                if (partition.size() == partitionOrder[i]) {
                    return i;
                }
            }
            return partitionOrder.length;
        }));

        // Merge sorted partitions
        for (List<Integer> partition : sortedPartitions) {
            mergedArray.addAll(partition);
        }

        return mergedArray;
    }
}
